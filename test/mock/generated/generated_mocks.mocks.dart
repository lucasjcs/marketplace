// Mocks generated by Mockito 5.0.16 from annotations
// in marketplace_nuconta/test/mock/generated/generated_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:ui' as _i12;

import 'package:get/get.dart' as _i5;
import 'package:get/get_state_manager/src/simple/list_notifier.dart' as _i11;
import 'package:gql/ast.dart' as _i6;
import 'package:graphql/client.dart' as _i7;
import 'package:graphql/src/core/_data_class.dart' as _i14;
import 'package:marketplace_nuconta/app/domain/entity/entity.dart' as _i4;
import 'package:marketplace_nuconta/app/domain/gateways/gateways.dart' as _i2;
import 'package:marketplace_nuconta/app/domain/usecase/get_customer_data_usecase.dart'
    as _i3;
import 'package:marketplace_nuconta/app/domain/usecase/make_purshase_usecase.dart'
    as _i9;
import 'package:marketplace_nuconta/app/ui/mixins/page_state.dart' as _i13;
import 'package:marketplace_nuconta/app/ui/pages/app_controller.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetCustomerDataGateway_0 extends _i1.Fake
    implements _i2.GetCustomerDataGateway {}

class _FakeMakePurchaseGateway_1 extends _i1.Fake
    implements _i2.MakePurchaseGateway {}

class _FakeGetCustomerDataUseCase_2 extends _i1.Fake
    implements _i3.GetCustomerDataUseCase {}

class _FakeCustomer_3 extends _i1.Fake implements _i4.Customer {}

class _FakeInternalFinalCallback_4<T> extends _i1.Fake
    implements _i5.InternalFinalCallback<T> {}

class _FakeRxBool_5 extends _i1.Fake implements _i5.RxBool {}

class _FakeRxString_6 extends _i1.Fake implements _i5.RxString {}

class _FakeDocumentNode_7 extends _i1.Fake implements _i6.DocumentNode {}

class _FakePolicies_8 extends _i1.Fake implements _i7.Policies {}

class _FakeContext_9 extends _i1.Fake implements _i7.Context {}

class _FakeRequest_10 extends _i1.Fake implements _i7.Request {}

class _FakeWatchQueryOptions_11 extends _i1.Fake
    implements _i7.WatchQueryOptions {}

class _FakeDefaultPolicies_12 extends _i1.Fake implements _i7.DefaultPolicies {}

class _FakeLink_13 extends _i1.Fake implements _i7.Link {}

class _FakeGraphQLCache_14 extends _i1.Fake implements _i7.GraphQLCache {}

class _FakeQueryManager_15 extends _i1.Fake implements _i7.QueryManager {}

class _FakeObservableQuery_16 extends _i1.Fake implements _i7.ObservableQuery {}

class _FakeQueryResult_17 extends _i1.Fake implements _i7.QueryResult {}

/// A class which mocks [GetCustomerDataGateway].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCustomerDataGateway extends _i1.Mock
    implements _i2.GetCustomerDataGateway {
  MockGetCustomerDataGateway() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.Customer?> getCustomerData() => (super.noSuchMethod(
      Invocation.method(#getCustomerData, []),
      returnValue: Future<_i4.Customer?>.value()) as _i8.Future<_i4.Customer?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetCustomerDataUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCustomerDataUseCase extends _i1.Mock
    implements _i3.GetCustomerDataUseCase {
  MockGetCustomerDataUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetCustomerDataGateway get getCustomerDataGateway =>
      (super.noSuchMethod(Invocation.getter(#getCustomerDataGateway),
              returnValue: _FakeGetCustomerDataGateway_0())
          as _i2.GetCustomerDataGateway);
  @override
  _i8.Future<_i4.Customer?> execute() => (super.noSuchMethod(
      Invocation.method(#execute, []),
      returnValue: Future<_i4.Customer?>.value()) as _i8.Future<_i4.Customer?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MakePurchaseGateway].
///
/// See the documentation for Mockito's code generation for more information.
class MockMakePurchaseGateway extends _i1.Mock
    implements _i2.MakePurchaseGateway {
  MockMakePurchaseGateway() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.PurchaseResponse?> makePurchase({String? offerId}) =>
      (super.noSuchMethod(
              Invocation.method(#makePurchase, [], {#offerId: offerId}),
              returnValue: Future<_i4.PurchaseResponse?>.value())
          as _i8.Future<_i4.PurchaseResponse?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MakePurchaseUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockMakePurchaseUseCase extends _i1.Mock
    implements _i9.MakePurchaseUseCase {
  MockMakePurchaseUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MakePurchaseGateway get makePurchaseGateway => (super.noSuchMethod(
      Invocation.getter(#makePurchaseGateway),
      returnValue: _FakeMakePurchaseGateway_1()) as _i2.MakePurchaseGateway);
  @override
  _i8.Future<_i4.PurchaseResponse?> execute({String? offerId}) =>
      (super.noSuchMethod(Invocation.method(#execute, [], {#offerId: offerId}),
              returnValue: Future<_i4.PurchaseResponse?>.value())
          as _i8.Future<_i4.PurchaseResponse?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AppController].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppController extends _i1.Mock implements _i10.AppController {
  MockAppController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GetCustomerDataUseCase get getCustomerDataUseCase =>
      (super.noSuchMethod(Invocation.getter(#getCustomerDataUseCase),
              returnValue: _FakeGetCustomerDataUseCase_2())
          as _i3.GetCustomerDataUseCase);
  @override
  _i4.Customer get customer => (super.noSuchMethod(Invocation.getter(#customer),
      returnValue: _FakeCustomer_3()) as _i4.Customer);
  @override
  set customer(_i4.Customer? value) =>
      super.noSuchMethod(Invocation.setter(#customer, value),
          returnValueForMissingStub: null);
  @override
  _i5.InternalFinalCallback<void> get onStart =>
      (super.noSuchMethod(Invocation.getter(#onStart),
              returnValue: _FakeInternalFinalCallback_4<void>())
          as _i5.InternalFinalCallback<void>);
  @override
  _i5.InternalFinalCallback<void> get onDelete =>
      (super.noSuchMethod(Invocation.getter(#onDelete),
              returnValue: _FakeInternalFinalCallback_4<void>())
          as _i5.InternalFinalCallback<void>);
  @override
  bool get initialized =>
      (super.noSuchMethod(Invocation.getter(#initialized), returnValue: false)
          as bool);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  int get listeners =>
      (super.noSuchMethod(Invocation.getter(#listeners), returnValue: 0)
          as int);
  @override
  _i5.RxBool get loading => (super.noSuchMethod(Invocation.getter(#loading),
      returnValue: _FakeRxBool_5()) as _i5.RxBool);
  @override
  set loading(_i5.RxBool? _loading) =>
      super.noSuchMethod(Invocation.setter(#loading, _loading),
          returnValueForMissingStub: null);
  @override
  _i5.RxBool get error => (super.noSuchMethod(Invocation.getter(#error),
      returnValue: _FakeRxBool_5()) as _i5.RxBool);
  @override
  set error(_i5.RxBool? _error) =>
      super.noSuchMethod(Invocation.setter(#error, _error),
          returnValueForMissingStub: null);
  @override
  _i5.RxString get errorMessage =>
      (super.noSuchMethod(Invocation.getter(#errorMessage),
          returnValue: _FakeRxString_6()) as _i5.RxString);
  @override
  set errorMessage(_i5.RxString? _errorMessage) =>
      super.noSuchMethod(Invocation.setter(#errorMessage, _errorMessage),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> getCustomerData(
          {dynamic Function(_i4.Customer)? onSuccess, Function? onError}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getCustomerData, [], {#onSuccess: onSuccess, #onError: onError}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void updateBalance(int? value) =>
      super.noSuchMethod(Invocation.method(#updateBalance, [value]),
          returnValueForMissingStub: null);
  @override
  void update([List<Object>? ids, bool? condition = true]) =>
      super.noSuchMethod(Invocation.method(#update, [ids, condition]),
          returnValueForMissingStub: null);
  @override
  void onInit() => super.noSuchMethod(Invocation.method(#onInit, []),
      returnValueForMissingStub: null);
  @override
  void onReady() => super.noSuchMethod(Invocation.method(#onReady, []),
      returnValueForMissingStub: null);
  @override
  void onClose() => super.noSuchMethod(Invocation.method(#onClose, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
  @override
  void $configureLifeCycle() =>
      super.noSuchMethod(Invocation.method(#$configureLifeCycle, []),
          returnValueForMissingStub: null);
  @override
  _i11.Disposer addListener(_i11.GetStateUpdate? listener) =>
      (super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValue: () {}) as _i11.Disposer);
  @override
  void removeListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void refresh() => super.noSuchMethod(Invocation.method(#refresh, []),
      returnValueForMissingStub: null);
  @override
  void refreshGroup(Object? id) =>
      super.noSuchMethod(Invocation.method(#refreshGroup, [id]),
          returnValueForMissingStub: null);
  @override
  void notifyChildrens() =>
      super.noSuchMethod(Invocation.method(#notifyChildrens, []),
          returnValueForMissingStub: null);
  @override
  void removeListenerId(Object? id, _i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListenerId, [id, listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i11.Disposer addListenerId(Object? key, _i11.GetStateUpdate? listener) =>
      (super.noSuchMethod(Invocation.method(#addListenerId, [key, listener]),
          returnValue: () {}) as _i11.Disposer);
  @override
  void disposeId(Object? id) =>
      super.noSuchMethod(Invocation.method(#disposeId, [id]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<T> run<T>(_i13.ExecuteCallback<T>? fn, {dynamic errorMessage}) =>
      (super.noSuchMethod(
          Invocation.method(#run, [fn], {#errorMessage: errorMessage}),
          returnValue: Future<T>.value(null)) as _i8.Future<T>);
}

/// A class which mocks [QueryOptions].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryOptions extends _i1.Mock implements _i7.QueryOptions {
  MockQueryOptions() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set pollInterval(Duration? _pollInterval) =>
      super.noSuchMethod(Invocation.setter(#pollInterval, _pollInterval),
          returnValueForMissingStub: null);
  @override
  List<Object?> get properties =>
      (super.noSuchMethod(Invocation.getter(#properties),
          returnValue: <Object?>[]) as List<Object?>);
  @override
  _i6.DocumentNode get document =>
      (super.noSuchMethod(Invocation.getter(#document),
          returnValue: _FakeDocumentNode_7()) as _i6.DocumentNode);
  @override
  set document(_i6.DocumentNode? _document) =>
      super.noSuchMethod(Invocation.setter(#document, _document),
          returnValueForMissingStub: null);
  @override
  set operationName(String? _operationName) =>
      super.noSuchMethod(Invocation.setter(#operationName, _operationName),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get variables =>
      (super.noSuchMethod(Invocation.getter(#variables),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set variables(Map<String, dynamic>? _variables) =>
      super.noSuchMethod(Invocation.setter(#variables, _variables),
          returnValueForMissingStub: null);
  @override
  set optimisticResult(Object? _optimisticResult) => super.noSuchMethod(
      Invocation.setter(#optimisticResult, _optimisticResult),
      returnValueForMissingStub: null);
  @override
  _i7.Policies get policies => (super.noSuchMethod(Invocation.getter(#policies),
      returnValue: _FakePolicies_8()) as _i7.Policies);
  @override
  set policies(_i7.Policies? _policies) =>
      super.noSuchMethod(Invocation.setter(#policies, _policies),
          returnValueForMissingStub: null);
  @override
  _i7.Context get context => (super.noSuchMethod(Invocation.getter(#context),
      returnValue: _FakeContext_9()) as _i7.Context);
  @override
  set context(_i7.Context? _context) =>
      super.noSuchMethod(Invocation.setter(#context, _context),
          returnValueForMissingStub: null);
  @override
  _i7.Request get asRequest =>
      (super.noSuchMethod(Invocation.getter(#asRequest),
          returnValue: _FakeRequest_10()) as _i7.Request);
  @override
  _i6.OperationType get type => (super.noSuchMethod(Invocation.getter(#type),
      returnValue: _i6.OperationType.query) as _i6.OperationType);
  @override
  bool get isQuery =>
      (super.noSuchMethod(Invocation.getter(#isQuery), returnValue: false)
          as bool);
  @override
  bool get isMutation =>
      (super.noSuchMethod(Invocation.getter(#isMutation), returnValue: false)
          as bool);
  @override
  bool get isSubscription => (super
          .noSuchMethod(Invocation.getter(#isSubscription), returnValue: false)
      as bool);
  @override
  _i7.WatchQueryOptions asWatchQueryOptions({bool? fetchResults = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #asWatchQueryOptions, [], {#fetchResults: fetchResults}),
          returnValue: _FakeWatchQueryOptions_11()) as _i7.WatchQueryOptions);
  @override
  bool equal(_i14.MutableDataClass? other) => (super
          .noSuchMethod(Invocation.method(#equal, [other]), returnValue: false)
      as bool);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GraphQLClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGraphQLClient extends _i1.Mock implements _i7.GraphQLClient {
  MockGraphQLClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.DefaultPolicies get defaultPolicies =>
      (super.noSuchMethod(Invocation.getter(#defaultPolicies),
          returnValue: _FakeDefaultPolicies_12()) as _i7.DefaultPolicies);
  @override
  set defaultPolicies(_i7.DefaultPolicies? _defaultPolicies) =>
      super.noSuchMethod(Invocation.setter(#defaultPolicies, _defaultPolicies),
          returnValueForMissingStub: null);
  @override
  _i7.Link get link =>
      (super.noSuchMethod(Invocation.getter(#link), returnValue: _FakeLink_13())
          as _i7.Link);
  @override
  _i7.GraphQLCache get cache => (super.noSuchMethod(Invocation.getter(#cache),
      returnValue: _FakeGraphQLCache_14()) as _i7.GraphQLCache);
  @override
  _i7.QueryManager get queryManager =>
      (super.noSuchMethod(Invocation.getter(#queryManager),
          returnValue: _FakeQueryManager_15()) as _i7.QueryManager);
  @override
  set queryManager(_i7.QueryManager? _queryManager) =>
      super.noSuchMethod(Invocation.setter(#queryManager, _queryManager),
          returnValueForMissingStub: null);
  @override
  _i7.ObservableQuery watchQuery(_i7.WatchQueryOptions? options) =>
      (super.noSuchMethod(Invocation.method(#watchQuery, [options]),
          returnValue: _FakeObservableQuery_16()) as _i7.ObservableQuery);
  @override
  _i7.ObservableQuery watchMutation(_i7.WatchQueryOptions? options) =>
      (super.noSuchMethod(Invocation.method(#watchMutation, [options]),
          returnValue: _FakeObservableQuery_16()) as _i7.ObservableQuery);
  @override
  _i8.Future<_i7.QueryResult> query(_i7.QueryOptions? options) =>
      (super.noSuchMethod(Invocation.method(#query, [options]),
              returnValue: Future<_i7.QueryResult>.value(_FakeQueryResult_17()))
          as _i8.Future<_i7.QueryResult>);
  @override
  _i8.Future<_i7.QueryResult> mutate(_i7.MutationOptions? options) =>
      (super.noSuchMethod(Invocation.method(#mutate, [options]),
              returnValue: Future<_i7.QueryResult>.value(_FakeQueryResult_17()))
          as _i8.Future<_i7.QueryResult>);
  @override
  _i8.Stream<_i7.QueryResult> subscribe(_i7.SubscriptionOptions? options) =>
      (super.noSuchMethod(Invocation.method(#subscribe, [options]),
              returnValue: Stream<_i7.QueryResult>.empty())
          as _i8.Stream<_i7.QueryResult>);
  @override
  _i8.Future<_i7.QueryResult> fetchMore(_i7.FetchMoreOptions? fetchMoreOptions,
          {_i7.QueryOptions? originalOptions,
          _i7.QueryResult? previousResult}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchMore, [
                fetchMoreOptions
              ], {
                #originalOptions: originalOptions,
                #previousResult: previousResult
              }),
              returnValue: Future<_i7.QueryResult>.value(_FakeQueryResult_17()))
          as _i8.Future<_i7.QueryResult>);
  @override
  Map<String, dynamic>? readQuery(_i7.Request? request,
          {bool? optimistic = true}) =>
      (super.noSuchMethod(Invocation.method(
              #readQuery, [request], {#optimistic: optimistic}))
          as Map<String, dynamic>?);
  @override
  Map<String, dynamic>? readFragment(_i7.FragmentRequest? fragmentRequest,
          {bool? optimistic = true}) =>
      (super.noSuchMethod(Invocation.method(
              #readFragment, [fragmentRequest], {#optimistic: optimistic}))
          as Map<String, dynamic>?);
  @override
  void writeQuery(_i7.Request? request,
          {Map<String, dynamic>? data, bool? broadcast = true}) =>
      super.noSuchMethod(
          Invocation.method(
              #writeQuery, [request], {#data: data, #broadcast: broadcast}),
          returnValueForMissingStub: null);
  @override
  void writeFragment(_i7.FragmentRequest? fragmentRequest,
          {bool? broadcast = true, Map<String, dynamic>? data}) =>
      super.noSuchMethod(
          Invocation.method(#writeFragment, [fragmentRequest],
              {#broadcast: broadcast, #data: data}),
          returnValueForMissingStub: null);
  @override
  _i8.Future<List<_i7.QueryResult?>>? resetStore(
          {bool? refetchQueries = true}) =>
      (super.noSuchMethod(Invocation.method(
              #resetStore, [], {#refetchQueries: refetchQueries}))
          as _i8.Future<List<_i7.QueryResult?>>?);
  @override
  String toString() => super.toString();
}
